// –ù–∞—Å—Ç—Ä–æ–∏–º Multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const upload = multer({ storage }).array('images', 10); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

// ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
router.post('/', upload, async (req, res) => {
    try {
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);

        const { name, description, price } = req.body;
        if (!req.files || !name || !description || !price) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, name, description, price) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' });
        }

        // –ó–∞–≥—Ä—É–∑–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
        const imageUrls = [];
        for (const file of req.files) {
            const result = await cloudinary.uploader.upload_stream({ resource_type: 'image' }, (error, result) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary:', error);
                    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
                }
                imageUrls.push(result.secure_url);
            });

            result.end(file.buffer); // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª –≤ Cloudinary
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const newProduct = new Product({
            imageUrls,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            name,
            description,
            price
        });

        await newProduct.save();
        res.status(201).json(newProduct);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error });
    }
});
