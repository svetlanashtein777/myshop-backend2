const express = require('express');
const router = express.Router();
const multer = require('multer');  // –ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è multer
const Product = require('../models/Product');
const cloudinary = require('cloudinary').v2;
const dotenv = require('dotenv');

dotenv.config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
    cloud_name: process.env.CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ storage }).array('images', 10); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
router.get('/', async (req, res) => {
    try {
        const products = await Product.find({}, { createdAt: 0, updatedAt: 0 }); // –ò—Å–∫–ª—é—á–∞–µ–º createdAt –∏ updatedAt
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
    }
});

// ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
router.post('/', upload, async (req, res) => {
    try {
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);

        const { name, description, price } = req.body;
        if (!req.files || !name || !description || !price) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, name, description, price) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
        const imageUrls = [];
        for (const file of req.files) {
            const result = await cloudinary.uploader.upload_stream({ resource_type: 'image' }, async (error, result) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary:', error);
                    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
                }
                imageUrls.push(result.secure_url);
            });
            result.end(file.buffer);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const newProduct = new Product({
            imageUrl: imageUrls, // –ú–∞—Å—Å–∏–≤ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            name,
            description,
            price
        });

        await newProduct.save();
        res.status(201).json(newProduct);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error });
    }
});

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
router.get('/:id', async (req, res) => {
    try {
        const product = await Product.findById(req.params.id, { createdAt: 0, updatedAt: 0 });
        if (!product) {
            return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
    }
});

// ‚úÖ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
router.delete('/:id', async (req, res) => {
    try {
        const product = await Product.findByIdAndDelete(req.params.id);
        if (!product) {
            return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
    }
});

module.exports = router;
